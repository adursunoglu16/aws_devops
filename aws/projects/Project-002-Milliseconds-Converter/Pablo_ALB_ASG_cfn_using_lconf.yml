AWSTemplateFormatVersion: 2010-09-09
Description: |
  This template will create Application Load Balancer with ASG using LT
  
Parameters:          # user girdileri
  VpcId:              # vpcid dedik sectik
    Description: VpcId of your existing Virtual Private Cloud(VPC)
    Type: AWS::EC2::VPC::Id
  Subnets:            #subnetidlist dedik sectik
    Description: The list of SubnetIds in your VPC
    Type: List<AWS::EC2::Subnet::Id>
  InstanceType:
    Description: Webserver EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t1.micro
      - m1.small
      - m1.medium
      - m1.large
    ConstraintDescription: must be a valid EC2 instance.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  
  
#Metadata:
  
Mappings:
  RegionImageMap:  # bu degerleri her region icin alip buraya koydum. amacim, asagida user bunu elle girmesin hangi regiondaysa buradan ceksin
    us-east-1:
      AMI: ami-0742b4e673072066f
    us-east-2:
      AMI: ami-05d72852800cbf29e
    us-west-1:
      AMI: ami-0577b787189839998
    us-west-2:
      AMI: ami-0518bb0e75d3619ca

  
#Conditions:
  
Resources:       # Bunu asagidan yukari doru doldurduk. En once security grup yani

  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !GetAZs 
      LaunchConfigurationName: !Ref myLaunchConfig
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MaxSize: '3' #required
      MinSize: '1' #required
      TargetGroupARNs:
        - !Ref myALBTargetGroup


  myLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap  #required   intrinsic function.bu fonksiyonla mapping yapcam ve user hangi regionda acarsa oradan bir image id cekcek.
        - RegionImageMap    # hangi map i kullancagin
        - !Ref AWS::Region  # hangi regiondaysan onu aliyor ve oradaki id yi aliyor.
        - AMI                 # senin regiondaki AMi ye karsilik gelen image id yi alir
      KeyName: !Ref KeyName  # bunu paramtersda tanimlicaz keyName diye oradan alcak. boylece her giren kendi key yazmakla ugrasmicak
      SecurityGroups:
        - !Ref myALBSecurityGroup
      UserData: !Base64  | # asagida yazanlari arka arkaya yazma oldugu ibi yaz demek icin | kullandik. > isareti ile yapsaydik arka arkaya ekle demis olurduk.
          #!/bin/bash
                yum update -y
                yum install -y httpd
                TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
                && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
                TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
                && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
                DATE_TIME=`date`
                chmod -R 777 /var/www/html
                echo "<html>
                <head>
                    <title> Congratulations! You have created an instance from Launch Template</title>
                </head>
                <body>
                    <h1>This web server is launched from launch template by YOUR_NAME</h1>
                    <p>This instance is created at <b>$DATE_TIME</b></p>
                    <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
                    <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
                </body>
                </html>" > /var/www/html/index.html
                systemctl start httpd
                systemctl enable httpd                    
      InstanceType: !Ref InstanceType #required     yukarida paramtersdan cekcek
  
   
  myCPUALBAutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref myAutoScalingGroup #required yukarida olusturunca ekledik
      PolicyType: TargetTrackingScaling        # AWS den aldik bunu
      TargetTrackingConfiguration:             # Bu veriliydi altindakileri biz gidip yazdik
        PredefinedMetricSpecification:      #TargetTrackingConfiguration a gittik AWS'de oradan yazdik
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60                           # CPU kullanim oranin ne olsun hani yuzde 50 60 falan diyoduk ya.TargetTrackingConfiguration a gittik AWS'de oradan yazdik


  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt myALBSecurityGroup.GroupId
      Subnets: !Ref Subnets        # parameters olusturduk ve sonra oradan cektik
      



  myALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:

      DefaultActions: #required
        - Type: forward                             # AWS den bakip yazdik
          TargetGroupArn: !Ref myALBTargetGroup   # target grubumdan git bu arn yi al dedik
      LoadBalancerArn: !Ref myALB                 #required    Arn amazon resource name
      Port: 80
      Protocol: HTTP



  myALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId                    # parameters olusturduk ve sonra oradan cektik

  myALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH and HTTP connection #required
      # GroupName: Burayi doldurdugumda stack olusturuken ikinci yuklemede hata veriyor o yuzden yazmiyoruz.
      SecurityGroupIngress:
        - IpProtocol: tcp      #tcp protokolu kullaniyoruz ve hangi portlari acacagimizi yaziyoruz.
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    

Outputs:   
  URL:
    Description: The URL of the website
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt myALB.DNSName